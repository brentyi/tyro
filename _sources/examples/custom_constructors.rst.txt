.. Comment: this file is automatically generated by `update_example_docs.py`.
   It should not be modified manually.

.. _example-category-custom_constructors:

Custom constructors
===================

In these examples, we show how custom types can be parsed by and registered with :func:`tyro.cli`.


.. _example-01_primitive_annotation:

Custom Primitive
----------------

.. note::

    This is an advanced feature, which should not be needed for the vast
    majority of use cases. If :mod:`tyro` is missing support for a built-in
    Python type, please open an issue on `GitHub <http://github.com/brentyi/tyro/issues>`_.

For additional flexibility, :mod:`tyro.constructors` exposes tyro's API for
defining behavior for different types. There are two categories of types:
primitive types can be instantiated from a single commandline argument, while
struct types are broken down into multiple.

In this example, we attach a custom constructor via a runtime annotation.


.. code-block:: python
    :linenos:

    # 01_primitive_annotation.py
    import json

    from typing_extensions import Annotated

    import tyro

    # A dictionary type, but `tyro` will expect a JSON string from the CLI.
    JsonDict = Annotated[
        dict,
        tyro.constructors.PrimitiveConstructorSpec(
            # Number of arguments to consume.
            nargs=1,
            # Argument name in usage messages.
            metavar="JSON",
            # Convert a list of strings to an instance. The length of the list
            # should match `nargs`.
            instance_from_str=lambda args: json.loads(args[0]),
            # Check if an instance is of the expected type. This is only used for
            # helptext formatting in the presence of union types.
            is_instance=lambda instance: isinstance(instance, dict),
            # Convert an instance to a list of strings. This is used for handling
            # default values that are set in Python. The length of the list should
            # match `nargs`.
            str_from_instance=lambda instance: [json.dumps(instance)],
        ),
    ]

    def main(
        dict1: JsonDict,
        dict2: JsonDict = {"default": None},
    ) -> None:
        print(f"{dict1=}")
        print(f"{dict2=}")

    if __name__ == "__main__":
        tyro.cli(main)




.. raw:: html

    <pre class="highlight" style="padding: 1em; box-sizing: border-box; font-size: 0.85em; line-height: 1.2em;">
    <strong style="opacity: 0.7; padding-bottom: 0.5em; display: inline-block"><span style="user-select: none">$ </span>python ./01_primitive_annotation.py --help</strong>
    <span style="font-weight: bold">usage</span>: 01_primitive_annotation.py [-h] --dict1 <span style="font-weight: bold">JSON</span> [--dict2 <span style="font-weight: bold">JSON</span>]
    
    <span style="font-weight: lighter">╭─</span><span style="font-weight: lighter"> options </span><span style="font-weight: lighter">──────────────────────────────────────────</span><span style="font-weight: lighter">─╮</span>
    <span style="font-weight: lighter">│</span> -h, --help          <span style="font-weight: lighter">show this help message and exit</span> <span style="font-weight: lighter">│</span>
    <span style="font-weight: lighter">│</span> --dict1 <span style="font-weight: bold">JSON</span>        <span style="font-weight: bold; color: #e60000">(required)</span>                      <span style="font-weight: lighter">│</span>
    <span style="font-weight: lighter">│</span> --dict2 <span style="font-weight: bold">JSON</span>        <span style="color: #008080">(default: '{"default": null}')</span>  <span style="font-weight: lighter">│</span>
    <span style="font-weight: lighter">╰─────────────────────────────────────────────────────╯</span>
    </pre>



.. raw:: html

    <pre class="highlight" style="padding: 1em; box-sizing: border-box; font-size: 0.85em; line-height: 1.2em;">
    <strong style="opacity: 0.7; padding-bottom: 0.5em; display: inline-block"><span style="user-select: none">$ </span>python ./01_primitive_annotation.py --dict1 '{"hello": "world"}'</strong>
    dict1={'hello': 'world'}
    dict2={'default': None}
    </pre>



.. raw:: html

    <pre class="highlight" style="padding: 1em; box-sizing: border-box; font-size: 0.85em; line-height: 1.2em;">
    <strong style="opacity: 0.7; padding-bottom: 0.5em; display: inline-block"><span style="user-select: none">$ </span>python ./01_primitive_annotation.py --dict1 '{"hello": "world"}' --dict2 '{"hello": "world"}'</strong>
    dict1={'hello': 'world'}
    dict2={'hello': 'world'}
    </pre>
.. _example-02_primitive_registry:

Custom Primitive (Registry)
---------------------------

In this example, we use :class:`tyro.constructors.PrimitiveConstructorSpec` to
define a rule that applies to all types that match ``dict[str, Any]``.


.. code-block:: python
    :linenos:

    # 02_primitive_registry.py
    import json
    from typing import Any

    import tyro

    custom_registry = tyro.constructors.ConstructorRegistry()

    @custom_registry.primitive_rule
    def _(
        type_info: tyro.constructors.PrimitiveTypeInfo,
    ) -> tyro.constructors.PrimitiveConstructorSpec | None:
        # We return `None` if the rule does not apply.
        if type_info.type != dict[str, Any]:
            return None

        # If the rule applies, we return the constructor spec.
        return tyro.constructors.PrimitiveConstructorSpec(
            nargs=1,
            metavar="JSON",
            instance_from_str=lambda args: json.loads(args[0]),
            is_instance=lambda instance: isinstance(instance, dict),
            str_from_instance=lambda instance: [json.dumps(instance)],
        )

    def main(
        dict1: dict[str, Any],
        dict2: dict[str, Any] = {"default": None},
    ) -> None:
        print(f"{dict1=}")
        print(f"{dict2=}")

    if __name__ == "__main__":
        # The custom registry is used as a context.
        with custom_registry:
            tyro.cli(main)




.. raw:: html

    <pre class="highlight" style="padding: 1em; box-sizing: border-box; font-size: 0.85em; line-height: 1.2em;">
    <strong style="opacity: 0.7; padding-bottom: 0.5em; display: inline-block"><span style="user-select: none">$ </span>python ./02_primitive_registry.py --help</strong>
    <span style="font-weight: bold">usage</span>: 02_primitive_registry.py [-h] --dict1 <span style="font-weight: bold">JSON</span> [--dict2 <span style="font-weight: bold">JSON</span>]
    
    <span style="font-weight: lighter">╭─</span><span style="font-weight: lighter"> options </span><span style="font-weight: lighter">──────────────────────────────────────────</span><span style="font-weight: lighter">─╮</span>
    <span style="font-weight: lighter">│</span> -h, --help          <span style="font-weight: lighter">show this help message and exit</span> <span style="font-weight: lighter">│</span>
    <span style="font-weight: lighter">│</span> --dict1 <span style="font-weight: bold">JSON</span>        <span style="font-weight: bold; color: #e60000">(required)</span>                      <span style="font-weight: lighter">│</span>
    <span style="font-weight: lighter">│</span> --dict2 <span style="font-weight: bold">JSON</span>        <span style="color: #008080">(default: '{"default": null}')</span>  <span style="font-weight: lighter">│</span>
    <span style="font-weight: lighter">╰─────────────────────────────────────────────────────╯</span>
    </pre>



.. raw:: html

    <pre class="highlight" style="padding: 1em; box-sizing: border-box; font-size: 0.85em; line-height: 1.2em;">
    <strong style="opacity: 0.7; padding-bottom: 0.5em; display: inline-block"><span style="user-select: none">$ </span>python ./02_primitive_registry.py --dict1 '{"hello": "world"}'</strong>
    dict1={'hello': 'world'}
    dict2={'default': None}
    </pre>



.. raw:: html

    <pre class="highlight" style="padding: 1em; box-sizing: border-box; font-size: 0.85em; line-height: 1.2em;">
    <strong style="opacity: 0.7; padding-bottom: 0.5em; display: inline-block"><span style="user-select: none">$ </span>python ./02_primitive_registry.py --dict1 '{"hello": "world"}' --dict2 '{"hello": "world"}'</strong>
    dict1={'hello': 'world'}
    dict2={'hello': 'world'}
    </pre>