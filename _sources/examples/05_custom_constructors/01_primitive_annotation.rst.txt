.. Comment: this file is automatically generated by `update_example_docs.py`.
   It should not be modified manually.

Custom Primitive
==========================================

For additional flexibility, :mod:`tyro.constructors` exposes tyro's API for
defining behavior for different types. There are two categories of types:
primitive types can be instantiated from a single commandline argument, while
struct types are broken down into multiple.

In this example, we attach a custom constructor via a runtime annotation.


.. code-block:: python
        :linenos:


        import json

        from typing_extensions import Annotated

        import tyro

        # A dictionary type, but `tyro` will expect a JSON string from the CLI.
        JsonDict = Annotated[
            dict,
            tyro.constructors.PrimitiveConstructorSpec(
                nargs=1,
                metavar="JSON",
                instance_from_str=lambda args: json.loads(args[0]),
                is_instance=lambda instance: isinstance(instance, dict),
                str_from_instance=lambda instance: [json.dumps(instance)],
            ),
        ]


        def main(
            dict1: JsonDict,
            dict2: JsonDict = {"default": None},
        ) -> None:
            print(f"{dict1=}")
            print(f"{dict2=}")


        if __name__ == "__main__":
            tyro.cli(main)

------------

.. raw:: html

        <kbd>python 05_custom_constructors/01_primitive_annotation.py --help</kbd>

.. program-output:: python ../../examples/05_custom_constructors/01_primitive_annotation.py --help

------------

.. raw:: html

        <kbd>python 05_custom_constructors/01_primitive_annotation.py --dict1 '{"hello": "world"}'</kbd>

.. program-output:: python ../../examples/05_custom_constructors/01_primitive_annotation.py --dict1 '{"hello": "world"}'

------------

.. raw:: html

        <kbd>python 05_custom_constructors/01_primitive_annotation.py --dict1 '{"hello": "world"}' --dict2 '{"hello": "world"}'</kbd>

.. program-output:: python ../../examples/05_custom_constructors/01_primitive_annotation.py --dict1 '{"hello": "world"}' --dict2 '{"hello": "world"}'
