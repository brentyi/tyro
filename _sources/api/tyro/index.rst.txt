:py:mod:`tyro`
==============

.. py:module:: tyro


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   conf/index.rst
   constructors/index.rst
   extras/index.rst


Package Contents
----------------

.. py:data:: __version__
   :value: '0.9.16'

   

.. py:function:: cli(f: tyro._typing.TypeForm[OutT], *, prog: None | str = None, description: None | str = None, args: None | Sequence[str] = None, default: None | OutT = None, return_unknown_args: typing_extensions.Literal[False] = False, use_underscores: bool = False, console_outputs: bool = True, config: None | Sequence[tyro.conf._markers.Marker] = None) -> OutT
                 cli(f: tyro._typing.TypeForm[OutT], *, prog: None | str = None, description: None | str = None, args: None | Sequence[str] = None, default: None | OutT = None, return_unknown_args: typing_extensions.Literal[True], use_underscores: bool = False, console_outputs: bool = True, config: None | Sequence[tyro.conf._markers.Marker] = None) -> tuple[OutT, list[str]]
                 cli(f: Callable[Ellipsis, OutT], *, prog: None | str = None, description: None | str = None, args: None | Sequence[str] = None, default: None = None, return_unknown_args: typing_extensions.Literal[False] = False, use_underscores: bool = False, console_outputs: bool = True, config: None | Sequence[tyro.conf._markers.Marker] = None) -> OutT
                 cli(f: Callable[Ellipsis, OutT], *, prog: None | str = None, description: None | str = None, args: None | Sequence[str] = None, default: None = None, return_unknown_args: typing_extensions.Literal[True], use_underscores: bool = False, console_outputs: bool = True, config: None | Sequence[tyro.conf._markers.Marker] = None) -> tuple[OutT, list[str]]

   Instantiate or call ``f``, with inputs populated from an automatically
   generated CLI interface.

   `f` should have type-annotated inputs, and can be a function or type. If
   ``f`` is a type, ``tyro.cli()`` returns an instance. If ``f`` is a
   function, ``tyro.cli()`` returns the output of calling the function.

   :param f: Function or type.
   :param prog: The name of the program printed in helptext. Mirrors argument from
                :py:class:`argparse.ArgumentParser()`.
   :param description: Description text for the parser, displayed when the --help flag is
                       passed in. If not specified, ``f``'s docstring is used. Mirrors argument from
                       :py:class:`argparse.ArgumentParser()`.
   :param args: If set, parse arguments from a sequence of strings instead of the
                commandline. Mirrors argument from :py:meth:`argparse.ArgumentParser.parse_args()`.
   :param default: An instance of ``OutT`` to use for default values; supported if ``f`` is a
                   type like a dataclass or dictionary, but not if ``f`` is a general callable
                   like a function or standard class. Helpful for merging CLI arguments with
                   values loaded from elsewhere. (for example, a config object loaded from a
                   yaml file)
   :param return_unknown_args: If True, return a tuple of the output of ``f`` and a list of
                               unknown arguments. Mirrors the unknown arguments returned from
                               :py:meth:`argparse.ArgumentParser.parse_known_args()`.
   :param use_underscores: If True, use underscores as a word delimeter instead of hyphens.
                           This primarily impacts helptext; underscores and hyphens are treated
                           equivalently when parsing happens. We default helptext to hyphens to follow
                           the GNU style guide.
                           https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
   :param console_outputs: If set to ``False``, parsing errors and help messages will be
                           supressed. This can be useful for distributed settings, where ``tyro.cli()``
                           is called from multiple workers but we only want console outputs from the
                           main one.
   :param config: Sequence of config marker objects, from :mod:`tyro.conf`. As an
                  alternative to using them locally in annotations
                  (``FlagConversionOff[bool]``), we can also pass in a sequence of
                  them here to apply globally.

   :returns: The output of ``f(...)`` or an instance ``f``. If ``f`` is a class, the two are
             equivalent. If ``return_unknown_args`` is True, returns a tuple of the output of
             ``f(...)`` and a list of unknown arguments.


.. py:data:: MISSING
   :type: Any

   Sentinel value to mark default values as missing. Can be used to mark fields
   passed in via `default=` for `tyro.cli()` as required.

   When used, the 'missing' semantics propagate to children. For example, if we write:

   .. code-block:: python

       def main(inner: Dataclass = tyro.MISSING) -> None:
           ...

       tyro.cli(main)

   then all fields belonging to ``Dataclass`` will be marked as missing, even if a
   default exists in the dataclass definition.

