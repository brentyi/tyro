:orphan:

:py:mod:`tyro.extras._subcommand_cli_from_dict`
===============================================

.. py:module:: tyro.extras._subcommand_cli_from_dict


Module Contents
---------------

.. py:data:: T

   

.. py:function:: subcommand_cli_from_dict(subcommands: Dict[str, Callable[Ellipsis, T]], *, prog: Optional[str] = None, description: Optional[str] = None, args: Optional[Sequence[str]] = None, use_underscores: bool = False, console_outputs: bool = True, config: Optional[Sequence[tyro.conf._markers.Marker]] = None, sort_subcommands: bool = False) -> T
                 subcommand_cli_from_dict(subcommands: Dict[str, Callable[Ellipsis, Any]], *, prog: Optional[str] = None, description: Optional[str] = None, args: Optional[Sequence[str]] = None, use_underscores: bool = False, console_outputs: bool = True, config: Optional[Sequence[tyro.conf._markers.Marker]] = None, sort_subcommands: bool = False) -> Any

   Generate a subcommand CLI from a dictionary of functions.

   For an input like:

   .. code-block:: python

       tyro.extras.subcommand_cli_from_dict(
           {
               "checkout": checkout,
               "commit": commit,
           }
       )

   This is internally accomplished by generating and calling:

   .. code-block:: python

       from typing import Annotated, Any, Union
       import tyro

       tyro.cli(
           Union[
               Annotated[
                   Any,
                   tyro.conf.subcommand(name="checkout", constructor=checkout),
               ],
               Annotated[
                   Any,
                   tyro.conf.subcommand(name="commit", constructor=commit),
               ],
           ]
       )

   :param subcommands: Dictionary that maps the subcommand name to function to call.
   :param prog: The name of the program printed in helptext. Mirrors argument from
                :py:class:`argparse.ArgumentParser`.
   :param description: Description text for the parser, displayed when the --help flag is
                       passed in. If not specified, `f`'s docstring is used. Mirrors argument from
                       :py:class:`argparse.ArgumentParser`.
   :param args: If set, parse arguments from a sequence of strings instead of the
                commandline. Mirrors argument from :py:meth:`argparse.ArgumentParser.parse_args()`.
   :param use_underscores: If True, use underscores as a word delimeter instead of hyphens.
                           This primarily impacts helptext; underscores and hyphens are treated equivalently
                           when parsing happens. We default helptext to hyphens to follow the GNU style guide.
                           https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
   :param console_outputs: If set to ``False``, parsing errors and help messages will be
                           supressed. This can be useful for distributed settings, where :func:`tyro.cli()`
                           is called from multiple workers but we only want console outputs from the
                           main one.
   :param config: Sequence of config marker objects, from :mod:`tyro.conf`.


