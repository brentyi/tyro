:orphan:

:py:mod:`tyro.extras._base_configs`
===================================

.. py:module:: tyro.extras._base_configs


Module Contents
---------------

.. py:data:: T

   

.. py:function:: overridable_config_cli(configs: Mapping[str, Tuple[str, T]], *, args: Optional[Sequence[str]] = None) -> T

   Helper function for creating a CLI interface that allows us to choose
   between default config objects (typically dataclasses) and override values
   within it. Turns off subcommand creation for any union types within the
   config object.

   This is a lightweight wrapper over :func:`tyro.cli()`, with some default
   arguments populated. Also see
   :func:`tyro.extras.subcommand_type_from_defaults()`.


   Example usage:

   .. code-block:: python

       import dataclasses

       import tyro


       @dataclasses.dataclass
       class Config:
           a: int
           b: str


       default_configs = {
           "small": (
               "Small config",
               Config(1, "small"),
           ),
           "big": (
               "Big config",
               Config(100, "big"),
           ),
       }
       config = tyro.extras.overridable_config_cli(default_configs)
       print(config)

   :param configs: A dictionary of config names mapped to a tuple of
                   (description, config object).
   :param args: Optional arguments to pass to the CLI.


.. py:function:: subcommand_type_from_defaults(defaults: Mapping[str, T], descriptions: Mapping[str, str] = {}, *, prefix_names: bool = True) -> tyro._typing.TypeForm[T]

   Construct a Union type for defining subcommands that choose between defaults.

   For example, when ``defaults`` is set to:

   .. code-block:: python

       {
           "small": Config(...),
           "big": Config(...),
       }

   We return:

   .. code-block:: python

       Union[
           Annotated[
               Config,
               tyro.conf.subcommand("small", default=Config(...))
           ],
           Annotated[
               Config,
               tyro.conf.subcommand("big", default=Config(...))
           ]
       ]

   Direct use of :py:data:`typing.Union` and :func:`tyro.conf.subcommand()` should generally be
   preferred, but this function can be helpful for succinctness.

   .. warning::

       The type returned by this function can be safely used as an input to
       :func:`tyro.cli()`, but for static analysis when used for annotations we
       recommend applying a `TYPE_CHECKING` guard:

       .. code-block:: python

           from typing import TYPE_CHECKING

           if TYPE_CHECKING:
               # Static type seen by language servers, type checkers, etc.
               SelectableConfig = Config
           else:
               # Runtime type used by tyro.
               SelectableConfig = subcommand_type_from_defaults(...)

   :param defaults: A dictionary of default subcommand instances.
   :param descriptions: A dictionary conttaining descriptions for helptext.
   :param prefix_names: Whether to prefix subcommand names.

   :returns: A subcommand type, which can be passed to :func:`tyro.cli`.


