:orphan:

:py:mod:`tyro.extras._choices_type`
===================================

.. py:module:: tyro.extras._choices_type


Module Contents
---------------

.. py:data:: T
   

   

.. py:function:: literal_type_from_choices(choices: Iterable[T]) -> tyro._typing.TypeForm[T]

   
   Generate a ``typing.Literal[]`` type that constrains values to a set of choices.

   .. warning::

       The type returned by this function can be safely used as a direct input to
       `tyro.cli()`; use as an annotation also works but is discouraged.

       Direct use of `typing.Literal` is preferred whenever possible.

       For use as an annotation, we recommend applying a TYPE_CHECKING guard:

       .. code-block:: python

           from typing import TYPE_CHECKING

           if TYPE_CHECKING:
               # Static type seen by language servers, type checkers, etc.
               Color = str
           else:
               # Runtime type used by tyro.
               Color = literal_type_from_choices(["red", "green", "blue"])

   Using ``Literal[...]`` directly should generally be preferred, but this helper can be
   used in the rare case that choices are generated dynamically. (for example, the keys
   of a dictionary)

