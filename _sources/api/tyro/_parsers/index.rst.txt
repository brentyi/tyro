:orphan:

:py:mod:`tyro._parsers`
=======================

.. py:module:: tyro._parsers

.. autoapi-nested-parse::

   
   Interface for generating ``argparse.ArgumentParser()`` definitions from callables.


Module Contents
---------------

.. py:data:: T

   

.. py:class:: ParserSpecification


   
   Each parser contains a list of arguments and optionally some subparsers.
   .. py:attribute:: f
      :type: Callable

      

   .. py:attribute:: description
      :type: str

      

   .. py:attribute:: args
      :type: List[tyro._arguments.ArgumentDefinition]

      

   .. py:attribute:: helptext_from_nested_class_field_name
      :type: Dict[str, Optional[str]]

      

   .. py:attribute:: subparsers
      :type: Optional[SubparsersSpecification]

      

   .. py:attribute:: subparsers_from_intern_prefix
      :type: Dict[str, SubparsersSpecification]

      

   .. py:attribute:: intern_prefix
      :type: str

      

   .. py:attribute:: extern_prefix
      :type: str

      

   .. py:attribute:: has_required_args
      :type: bool

      

   .. py:attribute:: consolidate_subcommand_args
      :type: bool

      

   .. py:method:: from_callable_or_type(f: Callable[Ellipsis, T], description: Optional[str], parent_classes: Set[Type[Any]], default_instance: Union[T, tyro._fields.PropagatingMissingType, tyro._fields.NonpropagatingMissingType], intern_prefix: str, extern_prefix: str, subcommand_prefix: str = '') -> ParserSpecification
      :staticmethod:

      
      Create a parser definition from a callable or type.

   .. py:method:: apply(parser: argparse.ArgumentParser) -> Tuple[argparse.ArgumentParser, Ellipsis]

      
      Create defined arguments and subparsers.

   .. py:method:: apply_args(parser: argparse.ArgumentParser) -> None

      
      Create defined arguments and subparsers.


.. py:function:: handle_field(field: tyro._fields.FieldDefinition, type_from_typevar: Dict[TypeVar, tyro._typing.TypeForm[Any]], parent_classes: Set[Type[Any]], intern_prefix: str, extern_prefix: str, subcommand_prefix: str) -> Union[tyro._arguments.ArgumentDefinition, ParserSpecification, SubparsersSpecification]

   
   Determine what to do with a single field definition.

.. py:class:: SubparsersSpecification


   
   Structure for defining subparsers. Each subparser is a parser with a name.
   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: parser_from_name
      :type: Dict[str, ParserSpecification]

      

   .. py:attribute:: intern_prefix
      :type: str

      

   .. py:attribute:: required
      :type: bool

      

   .. py:attribute:: default_instance
      :type: Any

      

   .. py:attribute:: options
      :type: Tuple[Union[tyro._typing.TypeForm[Any], Callable], Ellipsis]

      

   .. py:method:: from_field(field: tyro._fields.FieldDefinition, type_from_typevar: Dict[TypeVar, tyro._typing.TypeForm[Any]], parent_classes: Set[Type[Any]], intern_prefix: str, extern_prefix: str) -> Optional[SubparsersSpecification]
      :staticmethod:


   .. py:method:: apply(parent_parser: argparse.ArgumentParser) -> Tuple[argparse.ArgumentParser, Ellipsis]



.. py:function:: add_subparsers_to_leaves(root: Optional[SubparsersSpecification], leaf: SubparsersSpecification) -> SubparsersSpecification


.. py:function:: none_proxy() -> None


