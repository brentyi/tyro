:orphan:

:py:mod:`tyro._strings`
=======================

.. py:module:: tyro._strings

.. autoapi-nested-parse::

   Utilities and constants for working with strings.



Module Contents
---------------

.. py:data:: dummy_field_name
   :value: '__tyro_dummy_field__'

   

.. py:data:: DELIMETER
   :type: Literal[-, _]
   :value: '-'

   

.. py:function:: delimeter_context(delimeter: Literal[-, _])

   Context for setting the delimeter. Determines if `field_a` is populated as
   `--field-a` or `--field_a`. Not thread-safe.


.. py:function:: get_delimeter() -> Literal[-, _]

   Get delimeter used to separate words.


.. py:function:: swap_delimeters(p: str) -> str

   Replace hyphens with underscores (or vice versa) except when at the start.


.. py:function:: make_field_name(parts: Sequence[str]) -> str

   Join parts of a field name together. Used for nesting.

   ('parent_1', 'child') => 'parent-1.child'
   ('parents', '1', '_child_node') => 'parents.1._child-node'
   ('parents', '1', 'middle._child_node') => 'parents.1.middle._child-node'


.. py:function:: make_subparser_dest(name: str) -> str


.. py:function:: dedent(text: str) -> str

   Same as textwrap.dedent, but ignores the first line.


.. py:function:: hyphen_separated_from_camel_case(name: str) -> str


.. py:function:: subparser_name_from_type(prefix: str, cls: Type) -> str


.. py:function:: strip_ansi_sequences(x: str)


.. py:function:: multi_metavar_from_single(single: str) -> str


.. py:function:: join_union_metavars(metavars: Iterable[str]) -> str

   Metavar generation helper for unions. Could be revisited.

   .. rubric:: Examples

   None, INT => NONE|INT
   {0,1,2}, {3,4} => {0,1,2,3,4}
   {0,1,2}, {3,4}, STR => {0,1,2,3,4}|STR
   {None}, INT [INT ...] => {None}|{INT [INT ...]}
   STR, INT [INT ...] => STR|{INT [INT ...]}
   STR, INT INT => STR|{INT INT}

   The curly brackets are unfortunately overloaded but alternatives all interfere with
   argparse internals.


.. py:function:: remove_single_line_breaks(helptext: str) -> str


