:orphan:

:py:mod:`tyro._arguments`
=========================

.. py:module:: tyro._arguments

.. autoapi-nested-parse::

   Rules for taking high-level field definitions and lowering them into inputs for
   argparse's `add_argument()`.



Module Contents
---------------

.. py:data:: cached_property

   

.. py:class:: BooleanOptionalAction(option_strings: Sequence[str], dest: str, default: _T | str | None = None, type: Callable[[str], _T] | tyro._argparse.FileType | None = None, choices: Iterable[_T] | None = None, required: bool = False, help: str | None = None, metavar: str | tuple[str, Ellipsis] | None = None)


   Bases: :py:obj:`tyro._argparse.Action`

   Adapted from https://github.com/python/cpython/pull/27672

   .. py:method:: __call__(parser, namespace, values, option_string=None)


   .. py:method:: format_usage()



.. py:class:: ArgumentDefinition


   Structure containing everything needed to define an argument.

   .. py:property:: lowered
      :type: LoweredArgumentDefinition

      Lowered argument definition, generated by applying a sequence of rules.

   .. py:attribute:: intern_prefix
      :type: str

      

   .. py:attribute:: extern_prefix
      :type: str

      

   .. py:attribute:: subcommand_prefix
      :type: str

      

   .. py:attribute:: field
      :type: tyro._fields.FieldDefinition

      

   .. py:method:: __post_init__() -> None


   .. py:method:: add_argument(parser: Union[tyro._argparse.ArgumentParser, tyro._argparse._ArgumentGroup]) -> None

      Add a defined argument to a parser.


   .. py:method:: is_suppressed() -> bool

      Returns if the argument is suppressed. Suppressed arguments won't be
      added to the parser.



.. py:class:: LoweredArgumentDefinition


   Contains fields meant to be passed directly into argparse.

   .. py:attribute:: instance_from_str
      :type: Optional[Callable]

      

   .. py:attribute:: name_or_flags
      :type: Tuple[str, Ellipsis]
      :value: ()

      

   .. py:attribute:: default
      :type: Optional[Any]

      

   .. py:attribute:: dest
      :type: Optional[str]

      

   .. py:attribute:: required
      :type: Optional[bool]

      

   .. py:attribute:: action
      :type: Optional[Any]

      

   .. py:attribute:: nargs
      :type: Optional[Union[int, str]]

      

   .. py:attribute:: choices
      :type: Optional[Tuple[str, Ellipsis]]

      

   .. py:attribute:: metavar
      :type: Optional[str]

      

   .. py:attribute:: help
      :type: Optional[str]

      

   .. py:method:: is_fixed() -> bool

      If the instantiator is set to `None`, even after all argument
      transformations, it means that we don't have a valid instantiator for an
      argument. We then mark the argument as 'fixed', with a value always equal to the
      field default.



.. py:data:: USE_RICH
   :value: True

   

