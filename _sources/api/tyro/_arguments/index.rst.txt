:orphan:

:py:mod:`tyro._arguments`
=========================

.. py:module:: tyro._arguments

.. autoapi-nested-parse::

   
   Rules for taking high-level field definitions and lowering them into inputs for
   argparse's ``add_argument()``.


Module Contents
---------------

.. py:data:: cached_property
   

   

.. py:class:: BooleanOptionalAction(option_strings: Sequence[str], dest: str, default: _T | str | None = None, type: Callable[[str], _T] | argparse.FileType | None = None, choices: Iterable[_T] | None = None, required: bool = False, help: str | None = None, metavar: str | tuple[str, ...] | None = None)

   Bases: :py:obj:`argparse.Action`

   
   Adapted from https://github.com/python/cpython/pull/27672
   .. py:method:: __call__(self, parser, namespace, values, option_string=None)


   .. py:method:: format_usage(self)



.. py:class:: ArgumentDefinition

   
   Structure containing everything needed to define an argument.
   .. py:attribute:: dest_prefix
      :annotation: :str

      

   .. py:attribute:: name_prefix
      :annotation: :str

      

   .. py:attribute:: subcommand_prefix
      :annotation: :str

      

   .. py:attribute:: field
      :annotation: :tyro._fields.FieldDefinition

      

   .. py:attribute:: type_from_typevar
      :annotation: :Dict[TypeVar, tyro._typing.TypeForm[Any]]

      

   .. py:method:: add_argument(self, parser: Union[argparse.ArgumentParser, argparse._ArgumentGroup]) -> None

      
      Add a defined argument to a parser.

   .. py:method:: lowered(self) -> LoweredArgumentDefinition
      :property:

      
      Lowered argument definition, generated by applying a sequence of rules.


.. py:class:: LoweredArgumentDefinition

   
   Contains fields meant to be passed directly into argparse.
   .. py:attribute:: instantiator
      :annotation: :Optional[tyro._instantiators.Instantiator]

      

   .. py:attribute:: name_or_flag
      :annotation: :str = 

      

   .. py:attribute:: default
      :annotation: :Optional[Any]

      

   .. py:attribute:: dest
      :annotation: :Optional[str]

      

   .. py:attribute:: required
      :annotation: :Optional[bool]

      

   .. py:attribute:: action
      :annotation: :Optional[Any]

      

   .. py:attribute:: nargs
      :annotation: :Optional[Union[int, str]]

      

   .. py:attribute:: choices
      :annotation: :Optional[Union[Set[str], List[str]]]

      

   .. py:attribute:: metavar
      :annotation: :Optional[str]

      

   .. py:attribute:: help
      :annotation: :Optional[str]

      

   .. py:method:: is_fixed(self) -> bool

      
      If the instantiator is set to ``None``\ , even after all argument
      transformations, it means that we don't have a valid instantiator for an
      argument. We then mark the argument as 'fixed', with a value always equal to the
      field default.


.. py:data:: USE_RICH
   :annotation: = True

   

