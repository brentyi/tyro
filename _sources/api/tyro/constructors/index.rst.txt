:py:mod:`tyro.constructors`
===========================

.. py:module:: tyro.constructors


Package Contents
----------------

.. py:class:: PrimitiveConstructorSpec


   Bases: :py:obj:`Generic`\ [\ :py:obj:`T`\ ]

   
   Specification for constructing a primitive type from a string.

   There are two ways to use this class:

   First, we can include it in a type signature via ``typing.Annotated``.
   This is the simplest for making local modifications to parsing behavior for
   individual fields.

   Alternatively, it can be returned by a rule in a ``PrimitiveConstructorRegistry``.
   .. py:attribute:: nargs
      :type: int | typing_extensions.Literal[*]

      
      Number of arguments required to construct an instance. If nargs is "*", then
      the number of arguments is variable.

   .. py:attribute:: metavar
      :type: str

      
      Metavar to display in help messages.

   .. py:attribute:: instance_from_str
      :type: Callable[[list[str]], T]

      
      Given a list of string arguments, construct an instance of the type. The
      length of the list will match the value of nargs.

   .. py:attribute:: is_instance
      :type: Callable[[Any], bool | typing_extensions.Literal[~]]

      
      Given an object instance, does it match this primitive type? This is
      used for specific help messages when both a union type is present and a
      default is provided.

      Can return "~" to signify that an instance is a "fuzzy" match, and should
      only be used if there are no other matches. This is used for numeric tower
      support.

   .. py:attribute:: str_from_instance
      :type: Callable[[T], list[str]]

      
      Convert an instance to a list of string arguments that would construct
      the instance. This is used for help messages when a default is provided.

   .. py:attribute:: choices
      :type: tuple[str, Ellipsis] | None

      
      Finite set of choices for arguments.


.. py:class:: PrimitiveTypeInfo


   
   Information used to generate constructors for primitive types.
   .. py:attribute:: type
      :type: tyro._typing.TypeForm

      
      Annotated field type. Forward references, aliases, and type
      variables/parameters will have been resolved and runtime annotations
      (typing.Annotated) will have been stripped.

   .. py:attribute:: type_origin
      :type: tyro._typing.TypeForm | None

      
      The output of get_origin() on the static type.

   .. py:attribute:: markers
      :type: set[tyro.conf._markers.Marker]

      
      Set of tyro markers used to configure this field.

   .. py:method:: make(raw_annotation: tyro._typing.TypeForm | Callable, parent_markers: set[tyro.conf._markers.Marker]) -> PrimitiveTypeInfo
      :staticmethod:



.. py:exception:: UnsupportedTypeAnnotationError


   Bases: :py:obj:`Exception`

   
   Exception raised when an unsupported type annotation is detected.

.. py:class:: ConstructorRegistry


   
   Registry for rules that define how types are constructed from
   command-line arguments.

   The behavior of CLIs generated by tyro are based on two types of rules.

   *Primitive rules* should be a callable with the signature:

   .. code-block:: python

      (type_info: PrimitiveTypeInfo) -> PrimitiveConstructorSpec | None

   where ``None`` is returned if the rule doesn't apply. Each primitive rule
   defines behavior for a type that can be instantiated from a single
   command-line argument.

   *Struct rules* should be a callable with the signature:

   .. code-block:: python

      (type_info: StructTypeInfo) -> StructConstructorSpec | None

   where ``None`` is returned if the rule doesn't apply. Each struct rule
   defines behavior for a type that can be instantiated from multiple
   command-line arguments.

   To activate a registry, use it as a context manager. For example:

   .. code-block:: python

      registry = ConstructorRegistry()

      with registry:
          tyro.cli(...)
   .. py:method:: primitive_rule(rule: PrimitiveSpecRule) -> PrimitiveSpecRule

      
      Define a rule for constructing a primitive type from a string. The
      most recently added rule will be applied first.

   .. py:method:: struct_rule(rule: StructSpecRule) -> StructSpecRule

      
      Define a rule for constructing a primitive type from a string. The
      most recently added rule will be applied first.

   .. py:method:: get_primitive_spec(type_info: tyro.constructors._primitive_spec.PrimitiveTypeInfo) -> tyro.constructors._primitive_spec.PrimitiveConstructorSpec

      
      Get a constructor specification for a given type.

   .. py:method:: get_struct_spec(type_info: tyro.constructors._struct_spec.StructTypeInfo) -> tyro.constructors._struct_spec.StructConstructorSpec | None

      
      Get a constructor specification for a given type. Returns ``None`` if
      unsuccessful.

   .. py:method:: __enter__() -> None


   .. py:method:: __exit__(*args: Any) -> None



.. py:class:: StructConstructorSpec


   .. py:attribute:: instantiate
      :type: Callable[Ellipsis, Any]

      

   .. py:attribute:: fields
      :type: tuple[StructFieldSpec, Ellipsis]

      


.. py:class:: StructFieldSpec


   
   Behavior specification for a single field in our callable.
   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: type
      :type: tyro._typing.TypeForm

      

   .. py:attribute:: default
      :type: Any

      

   .. py:attribute:: is_default_overridden
      :type: bool

      

   .. py:attribute:: helptext
      :type: str | None

      


.. py:class:: StructTypeInfo


   
   Information used to generate constructors for primitive types.
   .. py:attribute:: type
      :type: tyro._typing.TypeForm

      

   .. py:attribute:: markers
      :type: tuple[Any, Ellipsis]

      

   .. py:attribute:: default
      :type: Any

      

   .. py:method:: make(f: tyro._typing.TypeForm | Callable, default: Any) -> StructTypeInfo
      :staticmethod:



