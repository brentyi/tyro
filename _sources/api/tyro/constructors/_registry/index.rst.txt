:orphan:

:py:mod:`tyro.constructors._registry`
=====================================

.. py:module:: tyro.constructors._registry


Module Contents
---------------

.. py:data:: current_registry
   :type: ConstructorRegistry | None

   

.. py:data:: PrimitiveSpecRule

   

.. py:data:: StructSpecRule

   

.. py:function:: check_default_instances() -> bool

   Check whether we should be strict about checking that default types and
   instances match.

   This is usually `False`; tyro attempts to be somewhat lenient when
   inconsistent types are encounted. Strictness, however, is useful for
   matching annotated subcommands to default values.


.. py:function:: check_default_instances_context()

   Context for whether we should be strict about checking that default
   types and instances match.

   This is usually `False`; tyro attempts to be somewhat lenient when
   inconsistent types are encounted. Strictness, however, is useful for
   matching annotated subcommands to default values.


.. py:class:: ConstructorRegistry


   Registry for rules that define how types are constructed from
   command-line arguments.

   The behavior of CLIs generated by tyro are based on two types of rules.

   *Primitive rules* should be a callable with the signature:

   .. code-block: python

       (type_info: PrimitiveTypeInfo) -> PrimitiveConstructorSpec | UnsupportedTypeAnnotationError | None

   where `None` is returned if the rule doesn't apply, and
   `UnsupportedTypeAnnotationError` is returned if the rule applies but an
   error was encountered. Each primitive rule defines behavior for a type that
   can be instantiated from a single command-line argument.


   *Struct rules* should be a callable with the signature:

   .. code-block: python

       (type_info: StructTypeInfo) -> StructConstructorSpec | None

   where `None` is returned if the rule doesn't apply. Each struct rule
   defines behavior for a type that can be instantiated from multiple
   command-line arguments.


   To activate a registry, use it as a context manager. For example:

   .. code-block: python

       registry = ConstructorRegistry()
       with registry:
           tyro.cli(...)


   .. py:method:: primitive_rule(rule: PrimitiveSpecRule) -> PrimitiveSpecRule

      Define a rule for constructing a primitive type from a string. The
      most recently added rule will be applied first.

      Custom primitive rules will take precedence over both default primitive
      rules and struct rules


   .. py:method:: struct_rule(rule: StructSpecRule) -> StructSpecRule

      Define a rule for constructing a primitive type from a string. The
      most recently added rule will be applied first.


   .. py:method:: get_primitive_spec(type_info: tyro.constructors._primitive_spec.PrimitiveTypeInfo, nondefault_only: bool = False) -> tyro.constructors._primitive_spec.PrimitiveConstructorSpec | tyro.constructors._primitive_spec.UnsupportedTypeAnnotationError
      :classmethod:

      Get a constructor specification for a given type.


   .. py:method:: get_struct_spec(type_info: tyro.constructors._struct_spec.StructTypeInfo) -> tyro.constructors._struct_spec.StructConstructorSpec | None
      :classmethod:

      Get a constructor specification for a given type. Returns `None` if
      unsuccessful.


   .. py:method:: __enter__() -> None


   .. py:method:: __exit__(*args: Any) -> None



