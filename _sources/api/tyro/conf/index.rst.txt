:py:mod:`tyro.conf`
===================

.. py:module:: tyro.conf

.. autoapi-nested-parse::

   
   The :mod:`tyro.conf` submodule contains helpers for attaching parsing-specific
   configuration metadata to types via `PEP 593 <https://peps.python.org/pep-0593/>`_ runtime
   annotations.

   Configuration flags are applied recursively, and should generally be subscripted:
   ``Fixed[T]``\ , ``Suppress[T]``\ , etc.

   Features here are supported, but generally unnecessary and should be used sparingly.


Package Contents
----------------

.. py:function:: arg(name: Optional[str] = None, metavar: Optional[str] = None, help: Optional[str] = None) -> Any

   
   Returns a metadata object for configuring arguments with ``typing.Annotated``.
   Useful for aesthetics.

   Usage:

   .. code-block:: python

      x: Annotated[int, tyro.conf.arg(...)]

.. py:function:: subcommand(name: Optional[str] = None, *, default: Any = MISSING_NONPROP, description: Optional[str] = None, prefix_name: bool = True) -> Any

   
   Returns a metadata object for configuring subcommands with ``typing.Annotated``.
   Useful for aesthetics.

   Consider the standard approach for creating subcommands:

   .. code-block:: python

      tyro.cli(
          Union[NestedTypeA, NestedTypeB]
      )

   This will create two subcommands: ``nested-type-a`` and ``nested-type-b``.

   Annotating each type with ``tyro.metadata.subcommand()`` allows us to override for
   each subcommand the (a) name, (b) defaults, (c) helptext, and (d) whether to prefix
   the name or not.

   .. code-block:: python

      tyro.cli(
          Union[
              Annotated[
                  NestedTypeA, subcommand("a", ...)
              ],
              Annotated[
                  NestedTypeA, subcommand("b", ...)
              ],
          ]
      )

.. py:data:: AvoidSubcommands
   

   
   Avoid creating subcommands when a default is provided for unions over nested types.
   This simplifies CLI interfaces, but makes them less expressive.

   Can be used directly on union types, ``AvoidSubcommands[Union[...]]``\ , or recursively
   applied to nested types.

.. py:data:: ConsolidateSubcommandArgs
   

   
   Consolidate arguments applied to subcommands. Makes CLI less sensitive to argument
   ordering, at the cost of support for optional subcommands.

   By default, ``tyro`` will generate a traditional CLI interface where args are applied to
   the directly preceding subcommand. When we have two subcommands ``s1`` and ``s2``\ :

   ::

      python x.py {--root options} s1 {--s1 options} s2 {--s2 options}

   This can be frustrating because the resulting CLI is sensitive the exact positioning and
   ordering of options.

   To consolidate subcommands, we push arguments to the end, after all subcommands:

   ::

      python x.py s1 s2 {--root, s1, and s2 options}

   This is more robust to reordering of options, ensuring that any new options can simply
   be placed at the end of the command>

.. py:data:: Fixed
   

   
   A type ``T`` can be annotated as ``Fixed[T]`` to prevent ``tyro.cli`` from parsing it; a
   default value should be set instead. Note that fields with defaults that can't be parsed
   will also be marked as fixed automatically.

.. py:data:: FlagConversionOff
   

   
   Turn off flag conversion for booleans with default values. Instead, types annotated
   with ``bool`` will expect an explicit True or False.

   Can be used directly on boolean annotations, ``FlagConversionOff[bool]``\ , or recursively
   applied to nested types.

.. py:data:: OmitSubcommandPrefixes
   

   
   Make flags used for keyword arguments in subcommands shorter by omitting prefixes.

   If we have a structure with the field:

   ::

      cmd: Union[NestedTypeA, NestedTypeB]


   By default, ``--cmd.arg`` may be generated as a flag for each dataclass in the union.
   If subcommand prefixes are omitted, we would instead simply have ``--arg``.

.. py:data:: Positional
   

   
   A type ``T`` can be annotated as ``Positional[T]`` if we want to parse it as a positional
   argument.

.. py:data:: Suppress
   

   
   A type ``T`` can be annotated as ``Suppress[T]`` to prevent ``tyro.cli`` from parsing it, and
   to prevent it from showing up in helptext.

.. py:data:: SuppressFixed
   

   
   Hide fields that are either manually or automatically marked as fixed.

.. py:data:: UseAppendAction
   

   
   Use "append" actions for variable-length arguments.

   Given an annotation like ``x: List[int]``\ , this means that ``x = [0, 1, 2]`` can be set via
   the CLI syntax ``--x 0 --x 1 --x 2`` instead of the default of ``--x 0 1 2``.

   The resulting syntax may be more user-friendly; for ``tyro``\ , it also enables support for
   otherwise ambiguous annotations like ``List[List[int]]``.

   Can be applied to all variable-length sequences (\ ``List[T]``\ , ``Sequence[T]``\ ,
   ``Tuple[T, ...]``\ , etc), including dictionaries without default values.

.. py:function:: configure(*markers: Marker) -> Callable[[CallableType], CallableType]

   
   Decorator for configuring functions.

   Configuration markers are implemented via ``typing.Annotated`` and straightforward to
   apply to types, for example:

   .. code-block:: python

      field: tyro.conf.FlagConversionOff[bool]

   This decorator makes markers applicable to general functions as well:

   .. code-block:: python

      # Recursively apply FlagConversionOff to all fields in `main()`.
      @tyro.conf.configure(tyro.conf.FlagConversionOff)
      def main(field: bool) -> None:
          ...

