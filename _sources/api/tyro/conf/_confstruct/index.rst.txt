:orphan:

:py:mod:`tyro.conf._confstruct`
===============================

.. py:module:: tyro.conf._confstruct


Module Contents
---------------

.. py:data:: T

   

.. py:function:: subcommand(name: str | None = None, *, default: Any = MISSING_NONPROP, description: str | None = None, prefix_name: bool = True, constructor: None = None, constructor_factory: Callable[[], type | Callable[Ellipsis, Any]] | None = None) -> Any
                 subcommand(name: str | None = None, *, default: Any = MISSING_NONPROP, description: str | None = None, prefix_name: bool = True, constructor: type | Callable[Ellipsis, Any] | None = None, constructor_factory: None = None) -> Any

   Configure subcommand behavior for Union types in the CLI.

   When tyro encounters a Union type over structures, it creates subcommands in the
   CLI. The `subcommand()` function allows you to customize the appearance and behavior
   of these subcommands.

   Example::

       from dataclasses import dataclass
       from typing import Annotated, Union
       import tyro

       @dataclass
       class TrainConfig:
           learning_rate: float = 0.01

       @dataclass
       class EvalConfig:
           checkpoint_path: str

       @dataclass
       class MainConfig:
           # Customized subcommands:
           mode: Union[
               Annotated[TrainConfig, tyro.conf.subcommand("train")],
               Annotated[EvalConfig, tyro.conf.subcommand("evaluate")]
           ]

       # CLI usage: python script.py mode:train --mode.learning-rate 0.02

   If a default value is provided both via `subcommand(default=...)` and in the field
   definition itself (`field = default`), the field default will take precedence.

   :param name: Custom name for the subcommand in the CLI.
   :param default: Default instance to use for this subcommand.
   :param description: Custom helptext for this subcommand.
   :param prefix_name: Whether to include the parent field name as a prefix in the subcommand
                       name (default: True).
   :param constructor: Custom constructor type or function for parsing arguments.
   :param constructor_factory: Function that returns a constructor type for parsing arguments
                               (cannot be used with constructor).

   :returns: A configuration object that should be attached to a type using `Annotated[]`.


.. py:function:: arg(*, name: str | None = None, metavar: str | None = None, help: str | None = None, help_behavior_hint: str | Callable[[str], str] | None = None, aliases: tuple[str, Ellipsis] | list[str] | None = None, prefix_name: bool | None = None, constructor: None = None, constructor_factory: Callable[[], type | Callable[Ellipsis, Any]] | None = None) -> Any
                 arg(*, name: str | None = None, metavar: str | None = None, help: str | None = None, help_behavior_hint: str | Callable[[str], str] | None = None, aliases: tuple[str, Ellipsis] | list[str] | None = None, prefix_name: bool | None = None, constructor: type | Callable[Ellipsis, Any] | None = None, constructor_factory: None = None) -> Any

   Provides fine-grained control over individual CLI argument properties.

   The `arg()` function allows you to customize how individual arguments appear and
   behave in the command-line interface. This provides more control than relying on
   the automatic argument generation.

   Example::

       from dataclasses import dataclass
       from typing import Annotated
       import tyro

       @dataclass
       class Config:
           # Default argument appearance
           regular_option: int = 1

           # Customized argument
           custom_option: Annotated[
               str,
               tyro.conf.arg(
                   name="opt",                     # Shorter name
                   help="Custom help message",     # Override docstring
                   aliases=("-o", "--short-opt"),  # Alternative flags
                   metavar="VALUE"                 # Display in help
               )
           ] = "default"

       # Usage:
       # python script.py --regular-option 5 --opt custom_value
       # python script.py --regular-option 5 -o custom_value

   The `arg()` function should be used at the root level of annotations and not
   nested within container types like lists.

   :param name: A custom name for the argument in the CLI.
   :param metavar: Argument placeholder shown in usage messages. The type is used by default.
   :param help: Custom helptext for this argument. The docstring is used by default.
   :param help_behavior_hint: Override the highlighted hint text that follows the helptext.
                              This is typically used for hints like "(default: XXX)" or "(optional)".
                              You can provide either a string or a lambda function that takes a formatted
                              default value as input.
   :param aliases: Alternative flag names for this argument. All strings must start
                   with a hyphen (-). Aliases are not prefixed in nested structures and are
                   not supported for positional arguments.
   :param prefix_name: Controls whether to prefix the argument name based on its position
                       in a nested structure. Arguments are prefixed by default.
   :param constructor: A custom constructor type or function to use in place of the
                       argument's type for parsing. See :mod:`tyro.constructors` for more details.
   :param constructor_factory: A function that returns a constructor type for parsing.
                               This cannot be used together with the constructor parameter.

   :returns: A configuration object that should be attached to a type using `Annotated[]`.


