:orphan:

:py:mod:`tyro.conf._confstruct`
===============================

.. py:module:: tyro.conf._confstruct


Module Contents
---------------

.. py:data:: T

   

.. py:function:: subcommand(name: str | None = None, *, default: Any = MISSING_NONPROP, description: str | None = None, prefix_name: bool = True, constructor: None = None, constructor_factory: Callable[[], type | Callable] | None = None) -> Any
                 subcommand(name: str | None = None, *, default: Any = MISSING_NONPROP, description: str | None = None, prefix_name: bool = True, constructor: type | Callable | None = None, constructor_factory: None = None) -> Any

   Returns a metadata object for configuring subcommands with
   :py:data:`typing.Annotated`. Useful for aesthetics.

   Consider the standard approach for creating subcommands:

   .. code-block:: python

       tyro.cli(
           Union[StructTypeA, StructTypeB]
       )

   This will create two subcommands: `nested-type-a` and `nested-type-b`.

   Annotating each type with :func:`tyro.conf.subcommand()` allows us to
   override for each subcommand the (a) name, (b) defaults, (c) helptext, and
   (d) whether to prefix the name or not.

   .. code-block:: python

       tyro.cli(
           Union[
               Annotated[
                   StructTypeA, subcommand("a", ...)
               ],
               Annotated[
                   StructTypeB, subcommand("b", ...)
               ],
           ]
       )

   If we have a default value both in the annotation and attached to the field
   itself (eg, RHS of `=` within function or dataclass signature), the field
   default will take precedence.

   .. code-block:: python

       # For the first subcommand, StructTypeA(1) will be used as the default.
       # The second subcommand, whose type is inconsistent with the field
       # default, will be unaffected.
       x: Union[
           Annotated[
               StructTypeA, subcommand(default=StructTypeA(0))
           ],
           Annotated[
               StructTypeB, subcommand(default=StructTypeB(0))
           ],
       ] = StructTypeA(1)

   :param name: The name of the subcommand in the CLI.
   :param default: A default value for the subcommand, for struct-like types. (eg
                   dataclasses).
   :param description: Description of this option to use in the helptext. Defaults to
                       docstring.
   :param prefix_name: Whether to prefix the name of the subcommand based on where it
                       is in a nested structure.
   :param constructor: A constructor type or function. This will be used in
                       place of the argument's type for parsing arguments. For more
                       configurability, see :mod:`tyro.constructors`.
   :param constructor_factory: A function that returns a constructor type. This
                               will be used in place of the argument's type for parsing arguments.
                               For more configurability, see :mod:`tyro.constructors`.


.. py:function:: arg(*, name: str | None = None, metavar: str | None = None, help: str | None = None, help_behavior_hint: str | Callable[[str], str] | None = None, aliases: tuple[str, Ellipsis] | list[str] | None = None, prefix_name: bool | None = None, constructor: None = None, constructor_factory: Callable[[], type | Callable[Ellipsis, Any]] | None = None) -> Any
                 arg(*, name: str | None = None, metavar: str | None = None, help: str | None = None, help_behavior_hint: str | Callable[[str], str] | None = None, aliases: tuple[str, Ellipsis] | list[str] | None = None, prefix_name: bool | None = None, constructor: type | Callable[Ellipsis, Any] | None = None, constructor_factory: None = None) -> Any

   Returns a metadata object for fine-grained argument configuration with
   :py:data:`typing.Annotated`. Should typically not be required.

   We support using :func:`arg()` at the root of arguments. For example:

   .. code-block:: python

       x: Annotated[int, tyro.conf.arg(...)]

   Nesting :func:`arg()` within other types is generally not supported:

   .. code-block:: python

       # Not supported.
       x: list[Annotated[int, tyro.conf.arg(...)]]


   :param name: A new name for the argument in the CLI.
   :param metavar: Argument name in usage messages. The type is used by default.
   :param help: Override helptext for this argument. The docstring is used by default.
   :param help_behavior_hint: Override highlighted text that follows the helptext.
                              Typically used for behavior hints like the `(default: XXX)` or
                              `(optional)`. Can either be a string or a lambda function whose
                              input is a formatted default value.
   :param aliases: Aliases for this argument. All strings in the sequence should start
                   with a hyphen (-). Aliases will _not_ currently be prefixed in a nested
                   structure, and are not supported for positional arguments.
   :param prefix_name: Whether or not to prefix the name of the argument based on where
                       it is in a nested structure. Arguments are prefixed by default.
   :param constructor: A constructor type or function. This will be used in
                       place of the argument's type for parsing arguments. For more
                       configurability, see :mod:`tyro.constructors`.
   :param constructor_factory: A function that returns a constructor type. This
                               will be used in place of the argument's type for parsing arguments.
                               For more configurability, see :mod:`tyro.constructors`.

   :returns: Object to attach via `typing.Annotated[]`.


