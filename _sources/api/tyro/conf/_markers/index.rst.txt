:orphan:

:py:mod:`tyro.conf._markers`
============================

.. py:module:: tyro.conf._markers


Module Contents
---------------

.. py:data:: T
   

   

.. py:data:: Positional
   

   
   A type ``T`` can be annotated as ``Positional[T]`` if we want to parse it as a positional
   argument.

.. py:data:: Fixed
   

   
   A type ``T`` can be annotated as ``Fixed[T]`` to prevent ``tyro.cli`` from parsing it; a
   default value should be set instead. Note that fields with defaults that can't be parsed
   will also be marked as fixed automatically.

.. py:data:: Suppress
   

   
   A type ``T`` can be annotated as ``Suppress[T]`` to prevent ``tyro.cli`` from parsing it, and
   to prevent it from showing up in helptext.

.. py:data:: SuppressFixed
   

   
   Hide fields that are either manually or automatically marked as fixed.

.. py:data:: FlagConversionOff
   

   
   Turn off flag conversion for booleans with default values. Instead, types annotated
   with ``bool`` will expect an explicit True or False.

   Can be used directly on boolean annotations, ``FlagConversionOff[bool]``\ , or recursively
   applied to nested types.

.. py:data:: AvoidSubcommands
   

   
   Avoid creating subcommands when a default is provided for unions over nested types.
   This simplifies CLI interfaces, but makes them less expressive.

   Can be used directly on union types, ``AvoidSubcommands[Union[...]]``\ , or recursively
   applied to nested types.

.. py:data:: OmitSubcommandPrefixes
   

   
   Make flags used for keyword arguments in subcommands shorter by omitting prefixes.

   If we have a structure with the field:

   ::

      cmd: Union[NestedTypeA, NestedTypeB]


   By default, ``--cmd.arg`` may be generated as a flag for each dataclass in the union.
   If subcommand prefixes are omitted, we would instead simply have ``--arg``.

.. py:class:: Marker

   Bases: :py:obj:`tyro._singleton.Singleton`

   .. py:method:: __getitem__(self, key)



