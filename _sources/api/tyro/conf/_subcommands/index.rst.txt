:orphan:

:py:mod:`tyro.conf._subcommands`
================================

.. py:module:: tyro.conf._subcommands


Module Contents
---------------

.. py:function:: subcommand(name: Optional[str] = None, *, default: Any = MISSING_NONPROP, description: Optional[str] = None, prefix_name: bool = True) -> Any

   
   Returns a metadata object for configuring subcommands with ``typing.Annotated``.
   This is useful but can make code harder to read, so usage is discouraged.

   Consider the standard approach for creating subcommands:

   .. code-block:: python

      tyro.cli(
          Union[NestedTypeA, NestedTypeB]
      )

   This will create two subcommands: ``nested-type-a`` and ``nested-type-b``.

   Annotating each type with ``tyro.metadata.subcommand()`` allows us to override for
   each subcommand the (a) name, (b) defaults, (c) helptext, and (d) whether to prefix
   the name or not.

   .. code-block:: python

      tyro.cli(
          Union[
              Annotated[
                  NestedTypeA, subcommand("a", ...)
              ],
              Annotated[
                  NestedTypeA, subcommand("b", ...)
              ],
          ]
      )

