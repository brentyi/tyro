:orphan:

:py:mod:`tyro._argparse_formatter`
==================================

.. py:module:: tyro._argparse_formatter

.. autoapi-nested-parse::

   Utilities and functions for helptext formatting. We replace argparse's simple help
   messages with ones that:
       - Are more nicely formatted!
       - Support multiple columns when many fields are defined.
       - Can be themed with an accent color.

   This is largely built by fussing around in argparse implementation details. It's
   chaotic as a result; for stability we mirror argparse at _argparse.py.



Module Contents
---------------

.. py:data:: ACCENT_COLOR
   :type: tyro._fmtlib.AnsiAttribute
   :value: 'white'

   

.. py:function:: set_accent_color(accent_color: Literal[black, red, green, yellow, blue, magenta, cyan, white, bright_black, bright_red, bright_green, bright_yellow, bright_blue, bright_magenta, bright_cyan, bright_white] | None) -> None

   Set an accent color to use in help messages. Experimental.


.. py:function:: recursive_arg_search(args: List[str], parser_spec: tyro._parsers.ParserSpecification, prog: str, unrecognized_arguments: Set[str]) -> Tuple[List[_ArgumentInfo], bool, bool]

   Recursively search for arguments in a ParserSpecification. Used for error message
   printing.

   Returns a list of arguments, whether the parser has subcommands or not, and -- if
   `unrecognized_arguments` is passed in --- whether an unrecognized argument exists
   under a different subparser.

   :param args: Arguments being parsed. Used for heuristics on subcommands.
   :param parser_spec: Argument parser specification.
   :param subcommands: Prog corresponding to parser_spec.
   :param unrecognized_arguments: Used for same_exists return value.


.. py:data:: global_unrecognized_arg_and_prog
   :type: List[Tuple[str, str]]
   :value: []

   

.. py:class:: TyroArgumentParser(*args, **kwargs)


   Bases: :py:obj:`tyro._argparse.ArgumentParser`, :py:obj:`argparse.ArgumentParser`

   Object for parsing command line strings into Python objects.

   :keyword - prog -- The name of the program (default: ``os.path.basename(sys.argv[0])``)
   :keyword - usage -- A usage message (default: auto-generated from arguments)
   :keyword - description -- A description of what the program does:
   :keyword - epilog -- Text following the argument descriptions:
   :keyword - parents -- Parsers whose arguments should be copied into this one:
   :keyword - formatter_class -- HelpFormatter class for printing help messages:
   :keyword - prefix_chars -- Characters that prefix optional arguments:
   :keyword - fromfile_prefix_chars -- Characters that prefix files containing: additional arguments
   :keyword - argument_default -- The default value for all arguments:
   :keyword - conflict_handler -- String indicating how to handle conflicts:
   :keyword - add_help -- Add a -h/-help option:
   :keyword - allow_abbrev -- Allow long options to be abbreviated unambiguously:
   :keyword - exit_on_error -- Determines whether or not ArgumentParser exits with: error info when an error occurs

   .. py:method:: format_help() -> str


   .. py:method:: error(message: str) -> NoReturn

      Improve error messages from argparse.

      error(message: string)

      Prints a usage message incorporating the message to stderr and
      exits.

      If you override this in a subclass, it should not return -- it
      should either exit or raise an exception.



