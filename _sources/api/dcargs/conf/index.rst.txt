:py:mod:`dcargs.conf`
=====================

.. py:module:: dcargs.conf

.. autoapi-nested-parse::

   
   The :mod:`dcargs.conf` submodule contains helpers for attaching parsing-specific
   configuration metadata to types via `PEP 593 <https://peps.python.org/pep-0593/>`_ runtime
   annotations.

   Features here are supported, but generally unnecessary and should be used sparingly.


Package Contents
----------------

.. py:data:: AvoidSubcommands
   

   
   Avoid creating subcommands when a default is provided for unions over nested types.
   This simplifies CLI interfaces, but makes them less expressive.

   Can be used directly on union types, ``AvoidSubcommands[Union[...]]``\ , or recursively
   applied to nested types.

.. py:data:: Fixed
   

   
   A type ``T`` can be annotated as ``Fixed[T]`` to prevent ``dcargs.cli`` from parsing it; a
   default value should be set instead. Note that fields with defaults that can't be parsed
   will also be marked as fixed automatically.

.. py:data:: FlagConversionOff
   

   
   Turn off flag conversion for booleans with default values. Instead, types annotated
   with ``bool`` will expect an explicit True or False.

   Can be used directly on boolean annotations, ``FlagConversionOff[bool]``\ , or recursively
   applied to nested types.

.. py:data:: OmitSubcommandPrefixes
   

   
   Make flags used for keyword arguments in subcommands shorter by omitting prefixes.

   If we have a structure with the field:

   ::

      cmd: Union[Commit, Checkout]


   By default, --cmd.branch may be generated as a flag for each dataclass in the union.
   If subcommand prefixes are omitted, we would instead simply have --branch.

.. py:data:: Positional
   

   
   A type ``T`` can be annotated as ``Positional[T]`` if we want to parse it as a positional
   argument.

.. py:data:: Suppress
   

   
   A type ``T`` can be annotated as ``Suppress[T]`` to prevent ``dcargs.cli`` from parsing it, and
   to prevent it from showing up in helptext.

.. py:function:: subcommand(name: Optional[str] = None, *, default: Any = MISSING_NONPROP, description: Optional[str] = None, prefix_name: bool = True) -> Any

   
   Returns a metadata object for configuring subcommands with ``typing.Annotated``.
   This is useful but can make code harder to read, so usage is discouraged.

   Consider the standard approach for creating subcommands:

   .. code-block:: python

      dcargs.cli(
          Union[NestedTypeA, NestedTypeB]
      )

   This will create two subcommands: ``nested-type-a`` and ``nested-type-b``.

   Annotating each type with ``dcargs.metadata.subcommand()`` allows us to override for
   each subcommand the (a) name, (b) defaults, (c) helptext, and (d) whether to prefix
   the name or not.

   .. code-block:: python

      dcargs.cli(
          Union[
              Annotated[
                  NestedTypeA, subcommand("a", ...)
              ],
              Annotated[
                  NestedTypeA, subcommand("b", ...)
              ],
          ]
      )

