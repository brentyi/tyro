[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "tyro"
authors = [
    {name = "brentyi", email = "brentyi@berkeley.edu"},
]
version = "0.5.12"
description = "Strongly typed, zero-effort CLI interfaces"
readme = "README.md"
license = { text="MIT" }
requires-python = ">=3.7"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent"
]
dependencies = [
    "docstring-parser>=0.14.1",
    "typing-extensions>=4.3.0",
    "backports.cached-property>=1.0.2; python_version<'3.8'",
    "colorama>=0.4.0; platform_system=='Windows'",
    "rich>=11.1.0",
    "shtab>=1.5.6"
]

[project.optional-dependencies]
dev = [
    "PyYAML>=6.0",
    "frozendict>=2.3.4",
    "pytest>=7.1.2",
    "pytest-cov>=3.0.0",
    "omegaconf>=2.2.2",
    "attrs>=21.4.0",
    "torch>=1.10.0",
    "pyright>=1.1.264",
    "mypy>=1.4.1",
    "numpy>=1.20.0",
    # As of 7/27/2023, flax install fails for Python 3.7 without pinning to an
    # old version. But doing so breaks other Python versions.
    "flax>=0.6.9;python_version>='3.8'", 
    "pydantic>=2.3.0",
    "coverage[toml]>=6.5.0"
]

[project.urls]
"GitHub" = "https://github.com/brentyi/tyro"

[tool.setuptools.packages.find]
exclude = [
    "tests*"
]

[tool.setuptools.package-data]
tyro = ["py.typed"]

[tool.isort]
profile = "black"

[tool.mypy]
python_version = "3.8"
ignore_missing_imports = true
warn_unused_configs = true
exclude = "^tests/test_py311_generated/.*"

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't compute coverage for abstract methods, properties
    "@abstract",
    "@abc\\.abstract",

    # or warnings
    "warnings",

    # or empty function bodies
    "pass",
    "\\.\\.\\.",

    # or typing imports
    "TYPE_CHECKING",

    # or assert statements & errors
    "assert",
    "raise AssertionError",

    # or anything that's not implemented
    "NotImplementedError()",

    # or fallback imports
    "except ImportError:",

    # or anything that's deprecated
    "deprecated",
]

[tool.ruff]
ignore = [
    "E501",  # Ignore line length errors.
]

[tool.pytest.ini_options]
pythonpath = [
  "."
]
