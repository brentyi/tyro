.. Comment: this file is automatically generated by `update_example_docs.py`.
   It should not be modified manually.

Decorator-based Subcommands
==========================================

:func:`tyro.extras.app.command()` and :func:`tyro.extras.app.cli()` provide a
decorator-based API for subcommands, which is inspired by `click
<https://click.palletsprojects.com/>`_.


.. code-block:: python
        :linenos:


        from tyro.extras import app


        @app.command
        def greet(name: str, loud: bool = False):
            """Greet someone."""
            greeting = f"Hello, {name}!"
            if loud:
                greeting = greeting.upper()
            print(greeting)


        @app.command
        def add(a: int, b: int):
            """Add two numbers."""
            print(f"{a} + {b} = {a + b}")


        if __name__ == "__main__":
            app.cli()

------------

.. raw:: html

        <kbd>python 04_additional/15_decorator_subcommands.py greet Alice</kbd>

.. program-output:: python ../../examples/04_additional/15_decorator_subcommands.py greet Alice

------------

.. raw:: html

        <kbd>python 04_additional/15_decorator_subcommands.py greet Bob --loud</kbd>

.. program-output:: python ../../examples/04_additional/15_decorator_subcommands.py greet Bob --loud

------------

.. raw:: html

        <kbd>python 04_additional/15_decorator_subcommands.py add 5 3</kbd>

.. program-output:: python ../../examples/04_additional/15_decorator_subcommands.py add 5 3
